#include <FastLED.h>

#include <LEDMatrix.h>
#include <LEDText.h>
#include <FontMatrise.h>
#include "NTPClient.h"
#include "ESP8266WiFi.h"
#include "WiFiUdp.h"
#include <WiFiClient.h>
#include <ArduinoJson.h>


#include "Snake.cpp"
#include "DeadChannel.cpp"
#include "Sprite.cpp"
#include "Plasma.cpp"


const char *ssid = "xxxxxxxx";
const char *password = "xxxxxxx";

const long utcOffsetInSeconds = 3600;

char daysOfTheWeek[7][12] = {"Domingo", "Lunes", "Martes", "Miercoles", "Jueves", "Viernes", "Sabado"};

// Define NTP Client to get time
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", utcOffsetInSeconds);

WiFiClient client;

// Open Weather Map API server name
const char server[] = "api.openweathermap.org";

// Replace the next line to match your city and 2 letter country code
String postalcode = "xxxxx,es"; 
String lat = "xxxxxx";
String lon = "xxxxxxx";
 

// Replace the next line with your API Key
String apiKey = "xxxxxxxxxx";

String text;
String TEMPERATURE_NOW = "";
String WEATHER_NOW = "";

int jsonend = 0;
boolean startJson = false;
int status = WL_IDLE_STATUS;
int animation = 0;


#define JSON_BUFF_DIMENSION 2500

unsigned long lastConnectionTime = 10 * 60 * 1000;  // last time you connected to the server, in milliseconds
const unsigned long postInterval = 20 * 60 * 1000;  // posting interval of 20 minutes  (20L * 1000L; 10 seconds delay for testing)




// Change the next 6 defines to match your matrix type and size

#define LED_PIN        2
#define COLOR_ORDER    GRB
#define CHIPSET        WS2812B

#define MATRIX_WIDTH   12
#define MATRIX_HEIGHT  12
#define MATRIX_TYPE    HORIZONTAL_ZIGZAG_MATRIX

cLEDMatrix<MATRIX_WIDTH, MATRIX_HEIGHT, MATRIX_TYPE> leds;

cLEDText ScrollingMsg;

//const unsigned char TxtDemo[] = {EFFECT_RGB "\xff\x00\xff" "   23:46   "};
// char TxtDemo[] = {"   00:00   "};
 char TxtDemo[] = {"   00:00                                            "};
 char DayOfWeek[]= {"           "};

 // Create the array of retro arcade characters and store it in Flash memory

const long Cls[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000
};

 
const long Sun01[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffbe00, 0xffbe00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0xffbe00, 0xfbd7b1, 0x000000, 0xfbd7b1, 0xfbd7b1, 0x000000, 0xfbd7b1, 0xffbe00, 0x000000, 0x000000, 
0x000000, 0x000000, 0xfbd7b1, 0xffda90, 0xffbe00, 0xfcb408, 0xfcb408, 0xffbe00, 0xffda90, 0xfbd7b1, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0xffbe00, 0xffbe00, 0xed1c24, 0xed1c24, 0xffbe00, 0xffbe00, 0x000000, 0x000000, 0x000000, 
0x000000, 0xffbe00, 0xfbd7b1, 0xffbe00, 0xffbe00, 0xffbe00, 0xffbe00, 0xffbe00, 0xffbe00, 0xfbd7b1, 0xffbe00, 0x000000, 
0x000000, 0xffbe00, 0xfbd7b1, 0xffbe00, 0xed1c24, 0xffbe00, 0xffbe00, 0xed1c24, 0xffbe00, 0xfbd7b1, 0xffbe00, 0x000000, 
0x000000, 0x000000, 0x000000, 0xffbe00, 0xffbe00, 0xffbe00, 0xffbe00, 0xffbe00, 0xffbe00, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0xfbd7b1, 0xffda90, 0xffbe00, 0xffbe00, 0xffbe00, 0xffbe00, 0xffda90, 0xfbd7b1, 0x000000, 0x000000, 
0x000000, 0x000000, 0xffbe00, 0xfbd8b2, 0x000000, 0xfbd7b1, 0xfbd7b1, 0x000000, 0xfbd7b1, 0xffbe00, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffbe00, 0xffbe00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000
};

const long Sun02[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xf59f36, 0xf59f36, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0xf59f36, 0xfbd7b1, 0x000000, 0xfbd7b1, 0xfbd7b1, 0x000000, 0xfbd7b1, 0xf59f36, 0x000000, 0x000000, 
0x000000, 0x000000, 0xfbd7b1, 0xf9c584, 0xffbe00, 0xfcb408, 0xfcb408, 0xffbe00, 0xf9c584, 0xfbd7b1, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0xffbe00, 0xffbe00, 0xed1c24, 0xed1c24, 0xfdb406, 0xffbe00, 0x000000, 0x000000, 0x000000, 
0x000000, 0xf59f36, 0xfbd7b1, 0xfcb408, 0xffbe00, 0xffbe00, 0xffbe00, 0xffbe00, 0xfcb408, 0xfbd7b1, 0xf59f36, 0x000000, 
0x000000, 0xf59f36, 0xfbd7b1, 0xfcb408, 0xed1c24, 0xffbe00, 0xffbe00, 0xed1c24, 0xfcb408, 0xfbd7b1, 0xf59f36, 0x000000, 
0x000000, 0x000000, 0x000000, 0xfcb408, 0xffbe00, 0xffbe00, 0xffbe00, 0xffbe00, 0xfcb408, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0xfbd7b1, 0xf9c482, 0xffbe00, 0xfcb408, 0xfcb408, 0xffbe00, 0xf9c584, 0xfbd7b1, 0x000000, 0x000000, 
0x000000, 0x000000, 0xf59f36, 0xfbd8b2, 0x000000, 0xfbd7b1, 0xfbd7b1, 0x000000, 0xfbd7b1, 0xf59f36, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xf59f36, 0xf59f36, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000
};


const long Cloud01[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0xfefefe, 0xfefefe, 0xfefefe, 0xfefefe, 0xfefefe, 0xfefefe, 0x000000, 0x000000, 
0x000000, 0xfefefe, 0xfefefe, 0xfefefe, 0xfefefe, 0xfefefe, 0xfefefe, 0xfefefe, 0xfefefe, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0xfefefe, 0xfefefe, 0xfefefe, 0xfefefe, 0xfefefe, 0xfefefe, 0xfefefe, 0xfefefe, 0x000000, 
0x000000, 0xfefefe, 0xfefefe, 0xfefefe, 0xfefefe, 0xfefefe, 0xfefefe, 0xe4dbba, 0xffb200, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0xffb200, 0xffb200, 0xffb200, 0xe4d9b9, 0xebeef9, 0xfefefe, 0xfefefe, 0xfefefe, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0xfefefe, 0xfefefe, 0xe9cf86, 0xffb200, 0xffb200, 0xffb200, 0xffb200, 0x000000, 0x000000, 
0x000000, 0x000000, 0xffb200, 0xffb200, 0xffb200, 0xffb200, 0xffb200, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffb200, 0x000000, 0xffb200, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000
};

const long Cloud02[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0xfefefe, 0xfefefe, 0xfefefe, 0xfefefe, 0xfefefe, 0xfefefe, 0x000000, 0x000000, 
0x000000, 0xfefefe, 0xfefefe, 0xfefefe, 0xfefefe, 0xfefefe, 0xfefefe, 0xfefefe, 0xfefefe, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0xfefefe, 0xfefefe, 0xfefefe, 0xfefefe, 0xfefefe, 0xfefefe, 0xfefefe, 0xfefefe, 0x000000, 
0x000000, 0xfefefe, 0xfefefe, 0xfefefe, 0xfefefe, 0xfefefe, 0xfefefe, 0xe4dbba, 0xffb200, 0xfde272, 0x000000, 0x000000, 
0x000000, 0xfde272, 0xffb200, 0xffb200, 0xffb200, 0xe4d9b9, 0xebeef9, 0xfefefe, 0xfefefe, 0xfefefe, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0xfefefe, 0xfefefe, 0xe9cf86, 0xffb200, 0xffb200, 0xffb200, 0xffb200, 0xfde272, 0x000000, 
0x000000, 0xfde272, 0xffb200, 0xffb200, 0xffb200, 0xffb200, 0xffb200, 0xfde272, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xfde272, 0xffb200, 0xfde272, 0xffb200, 0xfde272, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0xfde272, 0x000000, 0xfde272, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000
};

const long Rain01[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x0055ff, 0x000000, 0x0055ff, 0x000000, 0x0055ff, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x0055ff, 0x000000, 0x0055ff, 0x000000, 0x0055ff, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x444444, 0x444444, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0x444444, 0xffffff, 0xffffff, 0x444444, 0xffffff, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xf4f4f4, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000
};

const long Rain02[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x0055ff, 0x000000, 0x0055ff, 0x000000, 0x0055ff, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x0055ff, 0x000000, 0x0055ff, 0x000000, 0x0055ff, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x444444, 0x444444, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0x444444, 0xffffff, 0xffffff, 0x444444, 0xffffff, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xf4f4f4, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 
};

const long Snow01[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x444444, 0x444444, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0x444444, 0xffffff, 0xffffff, 0x444444, 0xffffff, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xf4f4f4, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 
};


const long Snow02[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x444444, 0x444444, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0x444444, 0xffffff, 0xffffff, 0x444444, 0xffffff, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xf4f4f4, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 
};


const long Storm01[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0xffff00, 0x000000, 0x000000, 0x000000, 0xffff00, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0xffff00, 0xffff00, 0x000000, 0x000000, 0xffff00, 0xffff00, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0xffff00, 0xffff00, 0x000000, 0x000000, 0xffff00, 0xffff00, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffff00, 0x000000, 0x000000, 0x000000, 0xffff00, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x444444, 0x444444, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0x444444, 0xffffff, 0xffffff, 0x444444, 0xffffff, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xf4f4f4, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 
};


const long Storm02[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffff00, 0x000000, 0x000000, 0x000000, 0xffff00, 0x000000, 0x000000, 
0x000000, 0x000000, 0xffff00, 0xffff00, 0x000000, 0x000000, 0xffff00, 0xffff00, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0xffff00, 0xffff00, 0x000000, 0x000000, 0xffff00, 0xffff00, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0xffff00, 0x000000, 0x000000, 0x000000, 0xffff00, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x444444, 0x444444, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0x444444, 0xffffff, 0xffffff, 0x444444, 0xffffff, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xf4f4f4, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 
};

const long Fog01[] PROGMEM =
{
0x55ffff, 0x55ffff, 0x55ffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x55ffff, 0x55ffff, 0x55ffff, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x55ffff, 0x55ffff, 0x55ffff, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x55ffff, 0x55ffff, 0x55ffff, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0xffffff, 0x55ffff, 0x55ffff, 0x55ffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0x444444, 0x444444, 0x444444, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x000000, 0x55ffff, 0x55ffff, 0x55ffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x55ffff, 0x55ffff, 0x55ffff, 
0x000000, 0xffffff, 0xffffff, 0x444444, 0xffffff, 0xffffff, 0xffffff, 0x444444, 0xffffff, 0xffffff, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 
0x000000, 0x000000, 0x55ffff, 0x55ffff, 0x55ffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x55ffff, 0x55ffff, 0x55ffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 
};

const long Fog02[] PROGMEM =
{
0x000000, 0x55ffff, 0x55ffff, 0x55ffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x55ffff, 0x55ffff, 0x55ffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x55ffff, 0x55ffff, 0x55ffff, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x55ffff, 0x55ffff, 0x55ffff, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x55ffff, 0x55ffff, 0x55ffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0xffffff, 0x444444, 0x444444, 0x444444, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 
0x55ffff, 0x55ffff, 0x55ffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x55ffff, 0x55ffff, 0x55ffff, 0x000000, 
0x000000, 0xffffff, 0xffffff, 0x444444, 0xffffff, 0xffffff, 0xffffff, 0x444444, 0xffffff, 0xffffff, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x55ffff, 0x55ffff, 0x55ffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x55ffff, 0x55ffff, 0x55ffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 
};



void setup()
{
  Serial.begin(115200);
  WiFi.begin(ssid, password);

  while ( WiFi.status() != WL_CONNECTED ) {
    delay ( 500 );
    Serial.print ( "." );
  }
  timeClient.begin();
  
  FastLED.addLeds<CHIPSET, LED_PIN, COLOR_ORDER>(leds[0], leds.Size());
  FastLED.setBrightness(64);
  FastLED.clear(true);
  delay(500);
  
  FastLED.showColor(CRGB::Red);
  delay(1000);
  FastLED.showColor(CRGB::Lime);
  delay(1000);
  FastLED.showColor(CRGB::Blue);
  delay(1000);
  FastLED.showColor(CRGB::White);
  delay(1000);
  FastLED.show();

 
  ScrollingMsg.SetFont(MatriseFontData);
  ScrollingMsg.Init(&leds, leds.Width(), ScrollingMsg.FontHeight() + 1, 0, 0);
  ScrollingMsg.SetText((unsigned char *)TxtDemo, sizeof(TxtDemo) - 1);
  ScrollingMsg.SetFrameRate(6);
  ScrollingMsg.SetTextDirection(CHAR_DOWN);
  ScrollingMsg.SetScrollDirection(SCROLL_RIGHT);
  ScrollingMsg.SetTextColrOptions(COLR_RGB,0xFF,0x00,0X00);
}

// to request data from OWM
void makehttpRequest() {
  // close any connection before send a new request to allow client make connection to server
  client.stop();

  // if there's a successful connection:
  if (client.connect(server, 80)) {
    // Serial.println("connecting...");
    // send the HTTP PUT request:
   
    client.println("GET /data/2.5/onecall?lat=" + lat + "&lon="+ lon+ "&APPID=" + apiKey + "&mode=json&units=metric&exclude=minutely,hourly,daily&lang=es");
    client.println("Host: api.openweathermap.org");
    client.println("User-Agent: ArduinoWiFi/1.2");
    client.println("Connection: close");
    client.println();
 
    
    unsigned long timeout = millis();
    while (client.available() == 0) {
      if (millis() - timeout > 5000) {
        Serial.println(">>> Client Timeout !");
        client.stop();
        return;
      }
    }
    
    char c = 0;

    boolean leer = true;

   // while (client.available()) {jsonend == 0 && startJson == true
    while (leer == true) {
      if (client.available()) {
        c = client.read();
        // since json contains equal number of open and close curly brackets, this means we can determine when a json is completely received  by counting
        // the open and close occurences,
       // Serial.print(c);
        if (c == '{') {
          startJson = true;         // set startJson true to indicate json message has started
          jsonend++;
        }
        if (c == '}') {
          jsonend--;
        }
        if (startJson == true) {
          text += c;
        }
        // if jsonend = 0 then we have have received equal number of curly braces 
        if (jsonend == 0 && startJson == true) {
          parseJson(text.c_str());  // parse c string text in parseJson function
          text = "";                // clear text string for the next time
          startJson = false;        // set startJson to false to indicate that a new message has not yet started
          leer = false;
        }
      }
    }
  }
  else {
    // if no connection was made:
    Serial.println("connection failed");
    return;
  }
}

//to parse json data recieved from OWM
void parseJson(const char * jsonString) {
  //StaticJsonBuffer<4000> jsonBuffer;

  //const size_t bufferSize = 49*JSON_ARRAY_SIZE(1) + JSON_ARRAY_SIZE(48) + 7*JSON_OBJECT_SIZE(1) + 49*JSON_OBJECT_SIZE(4) + JSON_OBJECT_SIZE(6) + 42*JSON_OBJECT_SIZE(13) + 6*JSON_OBJECT_SIZE(14) + JSON_OBJECT_SIZE(16) + 10589;
  const size_t bufferSize = 2*JSON_ARRAY_SIZE(1) + JSON_ARRAY_SIZE(2) + 4*JSON_OBJECT_SIZE(1) + 3*JSON_OBJECT_SIZE(2) + 3*JSON_OBJECT_SIZE(4) + JSON_OBJECT_SIZE(5) + 2*JSON_OBJECT_SIZE(7) + 2*JSON_OBJECT_SIZE(8) + 720;
  DynamicJsonBuffer jsonBuffer(bufferSize);

  Serial.println(jsonString);



  // FIND FIELDS IN JSON TREE
  JsonObject& root = jsonBuffer.parseObject(jsonString);
  if (!root.success()) {
    Serial.println("parseObject() failed");
    return;
  }


  JsonArray& list = root["hourly"];
  JsonObject& nowT = root["current"];
  JsonObject& later = list[0];

  // including temperature and humidity for those who may wish to hack it in

  
  float tempNow = nowT["temp"];
  String weatherNow = nowT["weather"][0]["main"];
  String weatherNowDescr = nowT["weather"][0]["description"];


  

  int temp = round(tempNow);


  TEMPERATURE_NOW = String(temp);
  WEATHER_NOW = String(weatherNow);



}


 


unsigned int getRandomColor() {
  unsigned int c1;
  c1 = random(0,256);
  return c1;
}

void retrieveTimeText() {
   timeClient.update();
  // unsigned char timetxt[] = {"  " timeClient.getHours() " : timeClient.getMinutes()    "};
   String daytxt = daysOfTheWeek[timeClient.getDay()];
   String timetxt = "";
   String hours = String(timeClient.getHours());
   String minutes = String(timeClient.getMinutes());
   if (hours.length()<2) {
      hours = "0"+hours;
   } 
   if (minutes.length()<2) {
      minutes = "0"+minutes;
   }
  
   timetxt = "   "+String(daytxt)+"      "+ hours +":"+ minutes+ "   temperatura:"+TEMPERATURE_NOW+" C";
  
  
   timetxt.toCharArray(TxtDemo,  sizeof(TxtDemo) );
  

   Serial.println(TxtDemo);
}

void drawSunny() {
  // Put Qbert first frame
  for(int passtime = 0; passtime < 8; passtime++) { // Display it 8 times
  
      FastLED.clear();
      for(int i = 0; i < MATRIX_WIDTH*MATRIX_HEIGHT; i++) {
          leds[0][i] = pgm_read_dword(&(Sun01[i]));  // Read array from Flash
      }
      
      FastLED.show();
      delay(500);
      
      FastLED.clear();
      for(int i = 0; i < MATRIX_WIDTH*MATRIX_HEIGHT; i++) {
          leds[0][i] = pgm_read_dword(&(Sun02[i]));  // Read array from Flash
      }
        
      FastLED.show();
      delay(500);
  }

  FastLED.clear();  
}

void drawCloudy() {
  // Put Qbert first frame
  for(int passtime = 0; passtime < 8; passtime++) { // Display it 8 times
  
      FastLED.clear();
      for(int i = 0; i < MATRIX_WIDTH*MATRIX_HEIGHT; i++) {
          leds[0][i] = pgm_read_dword(&(Cloud01[i]));  // Read array from Flash
      }
      
      FastLED.show();
      delay(500);
      
      FastLED.clear();
      for(int i = 0; i < MATRIX_WIDTH*MATRIX_HEIGHT; i++) {
          leds[0][i] = pgm_read_dword(&(Cloud02[i]));  // Read array from Flash
      }
        
      FastLED.show();
      delay(500);
  }

  FastLED.clear();  
}

void drawRainy() {
  // Put Qbert first frame
  for(int passtime = 0; passtime < 8; passtime++) { // Display it 8 times
  
      FastLED.clear();
      for(int i = 0; i < MATRIX_WIDTH*MATRIX_HEIGHT; i++) {
          leds[0][i] = pgm_read_dword(&(Rain01[i]));  // Read array from Flash
      }
      
      FastLED.show();
      delay(500);
      
      FastLED.clear();
      for(int i = 0; i < MATRIX_WIDTH*MATRIX_HEIGHT; i++) {
          leds[0][i] = pgm_read_dword(&(Rain02[i]));  // Read array from Flash
      }
        
      FastLED.show();
      delay(500);
  }

  FastLED.clear();  
}


void drawSnowy() {
  // Put Qbert first frame
  for(int passtime = 0; passtime < 8; passtime++) { // Display it 8 times
  
      FastLED.clear();
      for(int i = 0; i < MATRIX_WIDTH*MATRIX_HEIGHT; i++) {
          leds[0][i] = pgm_read_dword(&(Snow01[i]));  // Read array from Flash
      }
      
      FastLED.show();
      delay(500);
      
      FastLED.clear();
      for(int i = 0; i < MATRIX_WIDTH*MATRIX_HEIGHT; i++) {
          leds[0][i] = pgm_read_dword(&(Snow02[i]));  // Read array from Flash
      }
        
      FastLED.show();
      delay(500);
  }

  FastLED.clear();  
}

void drawStormy() {
  // Put Qbert first frame
  for(int passtime = 0; passtime < 8; passtime++) { // Display it 8 times
  
      FastLED.clear();
      for(int i = 0; i < MATRIX_WIDTH*MATRIX_HEIGHT; i++) {
          leds[0][i] = pgm_read_dword(&(Storm01[i]));  // Read array from Flash
      }
      
      FastLED.show();
      delay(500);
      
      FastLED.clear();
      for(int i = 0; i < MATRIX_WIDTH*MATRIX_HEIGHT; i++) {
          leds[0][i] = pgm_read_dword(&(Storm02[i]));  // Read array from Flash
      }
        
      FastLED.show();
      delay(500);
  }

  FastLED.clear();  
}

void drawFoggy() {
  // Put Qbert first frame
  for(int passtime = 0; passtime < 8; passtime++) { // Display it 8 times
  
      FastLED.clear();
      for(int i = 0; i < MATRIX_WIDTH*MATRIX_HEIGHT; i++) {
          leds[0][i] = pgm_read_dword(&(Fog01[i]));  // Read array from Flash
      }
      
      FastLED.show();
      delay(500);
      
      FastLED.clear();
      for(int i = 0; i < MATRIX_WIDTH*MATRIX_HEIGHT; i++) {
          leds[0][i] = pgm_read_dword(&(Fog02[i]));  // Read array from Flash
      }
        
      FastLED.show();
      delay(500);
  }

  FastLED.clear();  
}

void doDeadChannel() {
    DeadChannel deadChannel(leds[0], MATRIX_WIDTH, MATRIX_HEIGHT);
    deadChannel.start();
}


void doSnake() {
    Snake snake(leds[0], MATRIX_WIDTH, MATRIX_HEIGHT);
    snake.start();
}


void doHeart() {
    Sprite sprite(leds[0], MATRIX_WIDTH, MATRIX_HEIGHT, 1);
    sprite.start();
}

void doGhost() {
    Sprite sprite(leds[0], MATRIX_WIDTH, MATRIX_HEIGHT, 2);
    sprite.start();
}

void doInvader() {
    Sprite sprite(leds[0], MATRIX_WIDTH, MATRIX_HEIGHT, 3);
    sprite.start();
}

void doPlasma() {
    Plasma plasma(leds[0], MATRIX_WIDTH, MATRIX_HEIGHT);
    plasma.start();
}

void doAnimation(int i) {
    switch (i) {
      case 0:
        doHeart();
        break;
      case 1:
        doSnake();
        break;
      case 2:
        doGhost();
        break;
      case 3:
        doDeadChannel();
        break;
      case 4:
        doInvader();
        break;
      case 5:
        doPlasma();
        break;  
    }
}



void doWeather() {
      if (WEATHER_NOW == "Clear") {
         drawSunny();
      } else if (WEATHER_NOW == "Clouds") {
         drawCloudy();
      } else if ((WEATHER_NOW == "Rain") || (WEATHER_NOW == "Drizzle")) {
         drawRainy();
      } else if (WEATHER_NOW == "Thunderstorm") {
         drawStormy();
      } else if (WEATHER_NOW == "Snow") {
         drawSnowy();
      } else if ((WEATHER_NOW == "Mist") || (WEATHER_NOW == "Fog")  || (WEATHER_NOW == "Haze")) {
         drawFoggy();
      }
}

void doClearLeds() {
      FastLED.clear();
      for(int passtime = 0; passtime < 8; passtime++) {
        FastLED.clear();
        for(int i = 0; i < MATRIX_WIDTH*MATRIX_HEIGHT; i++) {
            leds[0][i] = pgm_read_dword(&(Cls[i]));  // Read array from Flash
        }
        FastLED.show();
      }
      FastLED.clear();
}

void doTask() {
   if (ScrollingMsg.UpdateText() == -1) {
      doAnimation(animation);
      animation = (animation+1) % 6;
      doClearLeds();
      delay(4000);
      doWeather();
      delay(2000);
      timeClient.update();
      delay(1000);
      retrieveTimeText();
      ScrollingMsg.SetTextColrOptions(COLR_RGB,getRandomColor(),getRandomColor(),getRandomColor());
      ScrollingMsg.SetText((unsigned char *)TxtDemo, sizeof(TxtDemo) - 1);
    } else {
      FastLED.show();
    }
  delay(10);
}

void loop()
{
   //OWM requires 10mins between request intervals
  //check if 20mins has passed then conect again and pull
  if (millis() - lastConnectionTime > postInterval) {
    // note the time that the connection was made:
    lastConnectionTime = millis();
    makehttpRequest();
  }
  doTask();

}
